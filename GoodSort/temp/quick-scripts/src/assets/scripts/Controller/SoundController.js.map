{"version":3,"sources":["assets\\scripts\\Controller\\SoundController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nimport { ConfigData } from '../config/GameConfig';\r\nimport Singleton from '../utils/Singleton';\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = SoundController\r\n * DateTime = Thu Feb 06 2025 23:04:17 GMT+0700 (Indochina Time)\r\n * Author = hoanghiep2001\r\n * FileBasename = SoundController.ts\r\n * FileBasenameNoExtension = SoundController\r\n * URL = db://assets/scripts/Controller/SoundController.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\r\n *\r\n */\r\n\r\nexport enum DefaultSoundTrack {\r\n    LoseSound = \"LoseSound\",\r\n    WinSound = \"WinSound\",\r\n}\r\n\r\nexport enum LoopedSoundTrack {\r\n    bgSound = \"bgSound\",\r\n}\r\n\r\nexport enum PrefabSoundTrack {\r\n    tilePickedSound = \"tilePickedSound\",\r\n    onShelfSound = \"onShelfSound\",\r\n    tripleMatchSortSound = \"tripleMatchSortSound\",\r\n    clearSound = \"clearSound\",\r\n}\r\n\r\n@ccclass('SoundController')\r\nexport class SoundController extends Singleton<SoundController> {\r\n    public sounds: cc.AudioSource[] = [];\r\n    private soundCooldown: number = 0.5;\r\n    private lastEatSoundTime: number = 0;\r\n    private eatSoundCount: number = 0;\r\n    private scheduledSounds: string[] = [];\r\n\r\n\r\n    @property(cc.AudioSource)\r\n    bgSound: cc.AudioSource = null;\r\n    @property(cc.AudioSource)\r\n    LoseSound: cc.AudioSource = null;\r\n    @property(cc.AudioSource)\r\n    WinSound: cc.AudioSource = null;\r\n\r\n    @property(cc.Node)\r\n    InstantiateSoundContainer: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    tilePickedSound: cc.Prefab = null;\r\n    @property(cc.Prefab)\r\n    onShelfSound: cc.Prefab = null;\r\n    @property(cc.Prefab)\r\n    tripleMatchSortSound: cc.Prefab = null;\r\n    @property(cc.Prefab)\r\n    clearSound: cc.Prefab = null;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        SoundController._instance = this;\r\n    }\r\n\r\n\r\n    protected onLoad(): void {\r\n\r\n    }\r\n\r\n\r\n    protected start(): void {\r\n\r\n    }\r\n\r\n\r\n    public playDefaultSound(soundName: string): void {\r\n        if (ConfigData.Game.isEnableSound) {\r\n            switch (soundName) {\r\n                case DefaultSoundTrack.LoseSound:\r\n                    this.LoseSound.play();\r\n                    break;\r\n                case DefaultSoundTrack.WinSound:\r\n                    this.WinSound.play();\r\n                    break;\r\n                case LoopedSoundTrack.bgSound:\r\n                    this.bgSound.play();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public playPrefabSound(soundName: PrefabSoundTrack): void {\r\n        if (ConfigData.Game.isEnableSound) {\r\n            this._playSound(soundName);\r\n            // if (soundName === PrefabSoundTrack.onShelfSound) {\r\n            //     this.playEatSound();\r\n            // } \r\n\r\n            // else {\r\n            //     this._playSound(soundName);\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n    // private playEatSound(): void {\r\n    //     const currentTime = performance.now() / 1000;\r\n\r\n    //     if (currentTime - this.lastEatSoundTime >= this.soundCooldown) {\r\n    //         this.eatSoundCount = 0;\r\n    //         this.scheduledSounds = [];\r\n    //         this.lastEatSoundTime = currentTime;\r\n    //         this._playSound(PrefabSoundTrack.EatSound);\r\n    //     } else if (this.eatSoundCount < 2) {\r\n    //         this.eatSoundCount++;\r\n    //         this.scheduledSounds.push(PrefabSoundTrack.EatSound);\r\n    //         this.scheduleEatSounds();\r\n    //     }\r\n    // }\r\n\r\n\r\n    // private scheduleEatSounds(): void {\r\n    //     if (this.scheduledSounds.length > 0) {\r\n    //         let interval = this.soundCooldown / this.eatSoundCount;\r\n    //         for (let i = 0; i < this.eatSoundCount; i++) {\r\n    //             this.scheduleOnce(() => {\r\n    //                 this._playSound(PrefabSoundTrack.EatSound);\r\n    //             }, interval * i);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n\r\n    private _playSound(soundName: PrefabSoundTrack): void {\r\n        let sound: cc.Node = null;\r\n        switch (soundName) {\r\n            case PrefabSoundTrack.onShelfSound:\r\n                sound = cc.instantiate(this.onShelfSound);\r\n                break;\r\n            case PrefabSoundTrack.tilePickedSound:\r\n                sound = cc.instantiate(this.tilePickedSound);\r\n                break;\r\n            case PrefabSoundTrack.tripleMatchSortSound:\r\n                sound = cc.instantiate(this.tripleMatchSortSound);\r\n                break;\r\n            case PrefabSoundTrack.clearSound:\r\n                sound = cc.instantiate(this.clearSound);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        sound.parent = this.InstantiateSoundContainer;\r\n\r\n        const _SoundComp = sound.getComponent(cc.AudioSource);\r\n        const audioId = cc.audioEngine.play(_SoundComp.clip, false, _SoundComp.volume);\r\n        cc.audioEngine.setFinishCallback(audioId, () => {\r\n            this.removeAudio(_SoundComp);\r\n        })\r\n        this.sounds.push(_SoundComp);\r\n    }\r\n\r\n\r\n    private removeAudio(_SoundComp: cc.AudioSource): void {\r\n        _SoundComp.destroy();\r\n    }\r\n\r\n\r\n    public muteSound(soundName: string, isMuted: boolean): void {\r\n        let result = this.sounds.find(sound => sound.node.name === soundName);\r\n        if (isMuted) result.volume = 0;\r\n        else result.volume = 1;\r\n    }\r\n\r\n\r\n    public stopSound(soundName: string): void {\r\n        switch (soundName) {\r\n            case DefaultSoundTrack.LoseSound:\r\n                this.LoseSound.stop();\r\n                break;\r\n            case DefaultSoundTrack.WinSound:\r\n                this.WinSound.stop();\r\n                break;\r\n            case LoopedSoundTrack.bgSound:\r\n                this.bgSound.stop();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    public stopAllSound(): void {\r\n        this.bgSound &&  this.bgSound.stop();\r\n        this.LoseSound && this.LoseSound.stop();\r\n        this.WinSound && this.WinSound.stop();\r\n    }\r\n}\r\n\r\n/**\r\n * [1] Class member could be defined like this.\r\n * [2] Use `property` decorator if your want the member to be serializable.\r\n * [3] Your initialization goes here.\r\n * [4] Your update function goes here.\r\n *\r\n * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/\r\n * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/decorator.html\r\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html\r\n */\r\n"]}